import unittest
import importlib
import pandas as pd

class TestAssignmentFive(unittest.TestCase):
    def test_01_SquareSqrtArgs(self):
        square_sqrt_args = asgmt.SquareSqrtArgs()
        self.assertEqual(square_sqrt_args.square_args(0, 1, 2), [0, 1, 4])
        self.assertEqual(square_sqrt_args.sqrt_args(0, 1, 4), [0.0, 1.0, 2.0])
        self.assertEqual(square_sqrt_args.square_args(3, 4, 5), [9, 16, 25])
        self.assertEqual(square_sqrt_args.sqrt_args(9, 16, 25), [3.0, 4.0, 5.0])
        self.assertEqual(square_sqrt_args.square_args(6, 7), [36, 49])
        self.assertEqual(square_sqrt_args.sqrt_args(36, 49), [6.0, 7.0])
    def test_02_Palindrome(self):
        palindrome = asgmt.Palindrome('eye')
        self.assertEqual(palindrome.original_text, 'eye')
        self.assertEqual(palindrome.reversed_text, 'eye')
        self.assertTrue(palindrome.is_palindrome())
        palindrome = asgmt.Palindrome('dye')
        self.assertEqual(palindrome.original_text, 'dye')
        self.assertEqual(palindrome.reversed_text, 'eyd')
        self.assertFalse(palindrome.is_palindrome())
        palindrome = asgmt.Palindrome('yay')
        self.assertEqual(palindrome.original_text, 'yay')
        self.assertEqual(palindrome.reversed_text, 'yay')
        self.assertTrue(palindrome.is_palindrome())
        palindrome = asgmt.Palindrome('may')
        self.assertEqual(palindrome.original_text, 'may')
        self.assertEqual(palindrome.reversed_text, 'yam')
        self.assertFalse(palindrome.is_palindrome())
    def test_03_CommonDivisors(self):
        cd = asgmt.CommonDivisors(3, 6)
        self.assertEqual(len(cd.x_divisors), 2)
        self.assertEqual(len(cd.y_divisors), 4)
        self.assertEqual(len(cd.get_common_divisors()), 2)
        cd = asgmt.CommonDivisors(4, 8)
        self.assertEqual(len(cd.x_divisors), 3)
        self.assertEqual(len(cd.y_divisors), 4)
        self.assertEqual(len(cd.get_common_divisors()), 3)
        cd = asgmt.CommonDivisors(5, 10)
        self.assertEqual(len(cd.x_divisors), 2)
        self.assertEqual(len(cd.y_divisors), 4)
        self.assertEqual(len(cd.get_common_divisors()), 2)
    def test_04_PrimeJudger(self):
        pj = asgmt.PrimeJudger(1)
        self.assertEqual(len(pj.get_divisors()), 1)
        self.assertFalse(pj.is_prime())
        pj = asgmt.PrimeJudger(2)
        self.assertEqual(len(pj.get_divisors()), 2)
        self.assertTrue(pj.is_prime())
        pj = asgmt.PrimeJudger(4)
        self.assertEqual(len(pj.get_divisors()), 3)
        self.assertFalse(pj.is_prime())
        pj = asgmt.PrimeJudger(5)
        self.assertEqual(len(pj.get_divisors()), 2)
        self.assertTrue(pj.is_prime())
    def test_05_import_countries_json(self):
        countries_json = asgmt.import_countries_json()
        self.assertIsInstance(countries_json, list)
        self.assertEqual(len(countries_json), 249)
    def test_06_lookup_country_iso_codes(self):
        self.assertEqual(asgmt.lookup_country_iso_codes("Taiwan"), ('TW', 'TWN'))
        self.assertEqual(asgmt.lookup_country_iso_codes("Japan"), ('JP', 'JPN'))
        self.assertEqual(asgmt.lookup_country_iso_codes("Lithuania"),  ('LT', 'LTU'))
        self.assertEqual(asgmt.lookup_country_iso_codes("Slovenia"), ('SI', 'SVN'))
        self.assertEqual(asgmt.lookup_country_iso_codes("Czechia"),  ('CZ', 'CZE'))
        self.assertEqual(asgmt.lookup_country_iso_codes("United States of America (the)"), ('US', 'USA'))
    def test_07_import_movies_csv(self):
        movies = asgmt.import_movies_csv()
        self.assertIsInstance(movies, pd.core.frame.DataFrame)
        self.assertEqual(movies.shape, (250, 6))
    def test_08_DataframeAttrs(self):
        movies = asgmt.import_movies_csv()
        dfa = asgmt.DataframeAttrs(movies)
        self.assertEqual(dfa.get_shape(), (250, 6))
        self.assertEqual(dfa.get_dtypes().size, 6)
        self.assertEqual(dfa.get_summary().shape, (8, 4))
    def test_09_find_top_gun_maverick(self):
        top_gun_maverick = asgmt.find_top_gun_maverick()
        self.assertIsInstance(top_gun_maverick, pd.core.frame.DataFrame)
        self.assertEqual(top_gun_maverick.shape, (1, 6))
    def test_10_find_starwars_episodes(self):
        starwars_episodes = asgmt.find_starwars_episodes()
        self.assertIsInstance(starwars_episodes, pd.core.frame.DataFrame)
        self.assertEqual(starwars_episodes.shape, (3, 6))

asgmt = importlib.import_module("asgmt-five")
suite = unittest.TestLoader().loadTestsFromTestCase(TestAssignmentFive)
runner = unittest.TextTestRunner(verbosity=2)
test_results = runner.run(suite)
number_of_failures = len(test_results.failures)
number_of_errors = len(test_results.errors)
number_of_test_runs = test_results.testsRun
number_of_successes = number_of_test_runs - (number_of_failures + number_of_errors)
print("You've got {} successes among {} questions.".format(number_of_successes, number_of_test_runs))